from sentence_transformers import SentenceTransformer
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Model yÃ¼kleme
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

# Soru-cevap veri seti (ilk defa aÃ§Ä±lÄ±ÅŸ iÃ§in)
data = {
    "soru": [
        "Makine Ã¶ÄŸrenmesi nedir?",
        "Denetimli Ã¶ÄŸrenme ne demektir?",
        "Denetimsiz Ã¶ÄŸrenme nedir?",
        "Veri kÃ¼mesi (dataset) nedir?",
        "Makine Ã¶ÄŸrenmesinde model ne demektir?",
        "Overfitting ne anlama gelir?",
        "DoÄŸruluk (accuracy) nasÄ±l hesaplanÄ±r?",
        "Makine Ã¶ÄŸrenmesinde eÄŸitim ve test verisi neden ayrÄ±lÄ±r?",
        "Lineer regresyon ne iÅŸe yarar?",
        "Scikit-learn hangi amaÃ§la kullanÄ±lÄ±r?",
        "KarmaÅŸÄ±k bir modelin Ã¶ÄŸrenmesi neden daha uzun sÃ¼rer?",
        "Hiperparametre nedir?",
        "Modelin doÄŸruluÄŸu nasÄ±l iyileÅŸtirilir?",
        "Veri temizleme neden Ã¶nemlidir?",
        "Ã–zellik mÃ¼hendisliÄŸi (feature engineering) nedir?",
        "Veri madenciliÄŸi (data mining) nedir?",
        "Yapay sinir aÄŸlarÄ± nasÄ±l Ã§alÄ±ÅŸÄ±r?",
        "Derin Ã¶ÄŸrenme nedir?",
        "Aktivasyon fonksiyonlarÄ± nelerdir?",
        "SÄ±nÄ±flandÄ±rma ve regresyon arasÄ±ndaki fark nedir?",
    ],
    "cevap": [
        "Makine Ã¶ÄŸrenmesi, veriden Ã¶ÄŸrenen algoritmalardÄ±r.",
        "Denetimli Ã¶ÄŸrenme, etiketli veriyle modeli eÄŸitmektir.",
        "Denetimsiz Ã¶ÄŸrenme, verideki yapÄ±larÄ± etiket olmadan keÅŸfetmektir.",
        "Veri kÃ¼mesi, modelin Ã¶ÄŸrenmesi iÃ§in kullanÄ±lan Ã¶rnekler topluluÄŸudur.",
        "Model, Ã¶ÄŸrenme sÃ¼reÃ§lerini kontrol eden yapÄ±dÄ±r.",
        "Overfitting, modelin veriye aÅŸÄ±rÄ± uyum saÄŸlamasÄ±dÄ±r.",
        "DoÄŸruluk, doÄŸru tahminlerin toplam tahminlere oranÄ±dÄ±r.",
        "EÄŸitim verisi, modelin Ã¶ÄŸrenmesini saÄŸlarken test verisi modelin doÄŸruluÄŸunu test eder.",
        "Lineer regresyon, sÃ¼rekli veriyle iliÅŸkiyi modellemeyi amaÃ§lar.",
        "Scikit-learn, Python'da makine Ã¶ÄŸrenmesi iÃ§in kullanÄ±lan bir kÃ¼tÃ¼phanedir.",
        "KarmaÅŸÄ±k modeller daha fazla parametreye sahip olduÄŸu iÃ§in daha fazla hesaplama gerektirir.",
        "Hiperparametre, modelin dÄ±ÅŸsal parametreleridir ve doÄŸru ayarlanmasÄ± gereklidir.",
        "Model doÄŸruluÄŸunu artÄ±rmak iÃ§in parametrelerin optimizasyonu ve veri iyileÅŸtirmesi yapÄ±labilir.",
        "Veri temizleme, hatalÄ± ve eksik verilerin dÃ¼zeltilmesidir ve modelin baÅŸarÄ±sÄ± iÃ§in Ã¶nemlidir.",
        "Ã–zellik mÃ¼hendisliÄŸi, ham verilerden anlamlÄ± Ã¶zellikler Ã§Ä±karmaktÄ±r.",
        "Veri madenciliÄŸi, bÃ¼yÃ¼k veri kÃ¼melerinden desenlerin ve iliÅŸkilerin Ã§Ä±karÄ±lmasÄ± sÃ¼recidir.",
        "Yapay sinir aÄŸlarÄ±, insan beynine benzer ÅŸekilde Ã§alÄ±ÅŸan Ã¶ÄŸrenme modelleridir.",
        "Derin Ã¶ÄŸrenme, Ã§ok katmanlÄ± yapÄ±larla veri analizini iÃ§eren bir makine Ã¶ÄŸrenmesi tÃ¼rÃ¼dÃ¼r.",
        "Aktivasyon fonksiyonlarÄ±, modelin Ã¶ÄŸrenme sÃ¼recinde doÄŸrusal olmayan Ã¶zellikler ekler.",
        "SÄ±nÄ±flandÄ±rma, veriyi kategorilere ayÄ±rÄ±rken regresyon sÃ¼rekli bir Ã§Ä±ktÄ±yÄ± tahmin eder.",
    ]
}

# Ã–nceki veri setini yÃ¼kleme
try:
    df = pd.read_pickle("guncel_veri_seti.pkl")
except FileNotFoundError:
    df = pd.DataFrame(data)

# Soru embedding'lerini oluÅŸturma
df["embedding"] = df["soru"].apply(lambda x: model.encode(x))

# Yeni soru alma
yeni_soru = input("ðŸ”¹ Yeni soruyu girin: ")
yeni_embedding = model.encode(yeni_soru)

# Benzerlikleri hesaplama
df["benzerlik"] = df["embedding"].apply(lambda x: cosine_similarity([x], [yeni_embedding])[0][0])

# En benzer soruyu bul
en_benzer_satir = df.sort_values("benzerlik", ascending=False).iloc[0]
en_benzerlik = en_benzer_satir["benzerlik"]
en_benzer_soru = en_benzer_satir["soru"]
en_benzer_cevap = en_benzer_satir["cevap"]

# EÅŸik
esik = 0.75

if en_benzerlik > esik:
    if yeni_soru.strip() != en_benzer_soru.strip():
        print(" Soru benzer ama tam aynÄ± deÄŸil. Veri setine yeni varyasyon olarak eklendi.")
        # Yeni soruyu aynÄ± cevapla ekliyoruz
        yeni_kayit = pd.DataFrame({
            "soru": [yeni_soru],
            "cevap": [en_benzer_cevap],
            "embedding": [yeni_embedding]
        })
        df = pd.concat([df, yeni_kayit], ignore_index=True)

    print(f" Cevap: {en_benzer_cevap}")
else:
    print(" Bu konuda elimde bilgi yok. LÃ¼tfen ilgili bir teknik soru girin.")

# Yeni veriyi kaydet
df.to_pickle("guncel_veri_seti.pkl")
